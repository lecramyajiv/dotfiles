# Crates

snippet ec "extern crate"
extern crate ${1};
endsnippet

# Modules and functions

snippet mod "module"
mod ${1} {
	${2}
}
endsnippet

snippet fn "function"
fn ${1}(${2}) ${3}{
	${4}
}
endsnippet

snippet fun "function"
fn ${1}(${2}) ${3}{
	${4}
}
endsnippet

snippet main "main"
fn main() {
	${1}
}
endsnippet

# Structures, enums, and traits

snippet st "struct"
struct ${1} {
	${2}
}
endsnippet

snippet en "enum"
enum ${1} {
	${2}
}
endsnippet

snippet tr "trait"
trait ${1} {
	${2}
}
endsnippet

snippet im "impl"
impl${1} {
	${2}
}
endsnippet

# Flow control

snippet b "block"
{
	${1}
}
endsnippet

snippet if "if"
if ${1} {
	${2}
}
endsnippet

snippet ife "if-else"
if ${1} {
	${2}
} else {
	${3}
}
endsnippet

snippet m "match"
match ${1} {
	${2}
}
endsnippet

snippet lo "loop"
loop {
	${1}
}
endsnippet

snippet wh "while"
while ${1} {
	${2}
}
endsnippet

snippet for "for"
for ${1} in ${2} {
	${3}
}
endsnippet

# Other statements

snippet r "return"
return ${1};
endsnippet

snippet pr "println!"
println!("${1}"${2});
endsnippet

snippet epr "eprintln!"
eprintln!("${1}"${2});
endsnippet

snippet pa "panic!"
panic!("${1}"${2});
endsnippet

snippet un "unimplemented!"
unimplemented!(${1});
endsnippet

# Comments

snippet d "documentation"
//! ${1}
endsnippet

snippet D "documentation"
/// ${1}
endsnippet

snippet todo "todo"
// TODO ${1}
endsnippet

snippet todor "todor"
// TODO (remove)
endsnippet

snippet code "code"
/// \`\`\`
/// ${1}
/// \`\`\`
endsnippet

# Attributes

snippet at "attribute"
#[${1}]
endsnippet

# Other

snippet . "self"
self.
endsnippet

snippet dt "display type"
let _: () = ${1};
endsnippet

# Tests

snippet tm "test module"
#[cfg(test)]
mod tests {
	use super::*;

	${1}
}
endsnippet

snippet t "test"
#[test]
fn ${1}() {
	${2}
}
endsnippet

snippet ae "ae"
assert_eq!(${1});
endsnippet
