extends c

# Namespaces

snippet ns "ns"
namespace ${1} {
${2}
}
endsnippet

snippet ans "ans"
namespace {
${1}
}
endsnippet

snippet un "un"
using namespace ${1};
endsnippet

# Class

snippet cl "cl"
class ${1} {
public:
	${2}
};
endsnippet

# Function

snippet fn "fn"
auto ${1}(${2}) -> ${3} {
	${4}
}
endsnippet

# Foreach

snippet fore "fore"
for (${1}) {
	${2}
}
endsnippet

snippet forec "forec"
for (${1:auto} ${2:i} = ${3}begin(), ${4:e} = ${5}end(); $2 != $4; ++$2) {
	${6}
}
endsnippet

# Scoped enum

snippet enc "enc"
enum class ${1} {
	${2}
};
endsnippet

# cout and cerr

snippet cout "cout"
std::cout << ${1} << "\n";
endsnippet

snippet coutf "coutf"
std::cout << __FILE__ << ":" << __LINE__ << ": " << ${1} << "\n";
endsnippet

snippet cerr "cerr"
std::cerr << ${1} << "\n";
endsnippet

snippet cerrf "cerrf"
std::cerr << __FILE__ << ":" << __LINE__ << ": " << ${1} << "\n";
endsnippet

# errs() for LLVM

snippet errs "errs"
llvm::errs() << ${1} << "\n";
endsnippet

snippet errsf "errsf"
llvm::errs() << __FILE__ << ":" << __LINE__ << ": " << ${1} << "\n";
endsnippet

# Display type of a variable

snippet dt "dt"
static_assert(decltype(${1:var})::dummy_error, "display type");
endsnippet

# Shared pointer

snippet Sh "Sh" w
ShPtr<${1}> ${2}
endsnippet

# Weak pointer

snippet Wk "Wk" w
WkPtr<${1}> ${2}
endsnippet

# Google Test

snippet t "test"
TEST(${1},
${2}) {
	${3}
}
endsnippet

snippet tf "tf"
TEST_F(${1},
${2}) {
	${3}
}
endsnippet

snippet ae "ae"
ASSERT_EQ(${1}, ${2});
endsnippet

snippet ee "ee"
EXPECT_EQ(${1}, ${2});
endsnippet

snippet an "an"
ASSERT_NE(${1}, ${2});
endsnippet

snippet en "en"
EXPECT_NE(${1}, ${2});
endsnippet

snippet at "at"
ASSERT_TRUE(${1});
endsnippet

snippet et "et"
EXPECT_TRUE(${1});
endsnippet

snippet af "af"
ASSERT_FALSE(${1});
endsnippet

snippet ef "ef"
EXPECT_FALSE(${1});
endsnippet

snippet ad "ad"
ASSERT_DEATH(${1}, ${2});
endsnippet

snippet ed "ed"
EXPECT_DEATH(${1}, ${2});
endsnippet
