-------------------------------------------------------------------------------
-- The theme of my own colorscheme.
-------------------------------------------------------------------------------

-- Palette.
p = {
  black = "#000000",
  white = "#ffffff",
  none = "none",
}

local theme = {}

function theme.setup()
  theme.highlights = {
    -- Base highlights
    Boolean = { link = "Number" },
    Character = { link = "String" },
    ColorColumn = { fg = p.white, bg = "gray19" },
    Comment = { fg = "#87afff", bg = p.none },
    Conceal = { fg = "#e5e5e5", bg = "#a9a9a9" },
    Conditional = { link = "Statement" },
    Constant = { fg = "#ffafaf", bg = p.none },
    CurSearch = { link = "Search" },
    Cursor = { fg = p.black, bg = "#00ff00" },
    CursorColumn = { fg = p.none, bg = "#555555" },
    CursorIM = { fg = p.none, bg = fg },
    CursorLine = { fg = p.none, bg = "#555555" },
    CursorLineFold = { link = "CursorLine" },
    CursorLineNr = { fg = "#ffff00", bg = p.none, bold = true },
    CursorLineSign = { link = "CursorLine" },
    Debug = { link = "Special" },
    Define = { link = "PreProc" },
    Delimiter = { link = "Special" },
    DiffAdd = { fg = p.white, bg = "#000087" },
    DiffChange = { fg = p.white, bg = "#870087" },
    DiffDelete = { fg = "#0000ff", bg = "#008787", bold = true },
    DiffText = { fg = p.white, bg = "#ff0000", bold = true },
    Directory = { fg = "#cc8000", bg = p.none },
    EndOfBuffer = { fg = "#cd0000", bg = p.none, bold = true },
    Error = { fg = "#cd0000", bg = p.white, reverse = true },
    ErrorMsg = { fg = "#cd0000", bg = p.white, reverse = true },
    Exception = { link = "Statement" },
    Float = { link = "Number" },
    FloatBorder = { fg = "#ff0000", bg = p.none },
    FoldColumn = { fg = p.white, bg = "gray30" },
    Folded = { fg = p.white, bg = "gray30" },
    Function = { fg = "#5fffff", bg = p.none },
    Identifier = { fg = p.white, bg = p.none },
    Ignore = { fg = p.black, bg = p.black },
    IncSearch = { link = "Search" },
    Include = { link = "PreProc" },
    Keyword = { link = "Statement" },
    Label = { link = "Statement" },
    LineNr = { fg = "#ffff00", bg = p.none },
    LineNrAbove = { link = "LineNr" },
    LineNrBelow = { link = "LineNr" },
    Macro = { link = "PreProc" },
    MatchParen = { fg = p.none, bg = "#0000ff" },
    MessageWindow = { link = "Pmenu" },
    ModeMsg = { fg = p.white, bg = "#0000ff", bold = true },
    MoreMsg = { fg = "#00ff00", bg = p.none, bold = true },
    MsgSeparator = { fg = p.white, bg = p.black },
    NonText = { fg = "#cc0000", bg = p.none, bold = true },
    Normal = { fg = p.white, bg = p.black },
    NormalFloat = { bg = p.black },
    NormalNC = { fg = p.white, bg = p.black },
    Number = { link = "Constant" },
    Operator = { fg = p.white, bg = p.none },
    Pmenu = { fg = p.white, bg = "gray30" },
    PmenuSbar = { fg = p.none, bg = p.none },
    PmenuSel = { fg = p.black, bg = p.white },
    PmenuThumb = { fg = p.none, bg = p.white },
    PopupNotification = { link = "Todo" },
    PopupSelected = { link = "PmenuSel" },
    PreCondit = { link = "PreProc" },
    PreProc = { fg = "#ff80ff", bg = p.none },
    Question = { link = "MoreMsg" },
    QuickFixLine = { fg = p.black, bg = "#ffd700" },
    Repeat = { link = "Statement" },
    Search = { fg = p.black, bg = "#ffff60" },
    SignColumn = { fg = "#00ffff", bg = p.none },
    Special = { fg = "#ffa500", bg = p.none },
    SpecialChar = { link = "Special" },
    SpecialComment = { link = "Special" },
    SpecialKey = { fg = "#cc0000", bg = p.none },
    SpellBad = { fg = "#ff4040", bg = p.none, sp = "#ff4040", undercurl = true },
    SpellCap = { fg = "#00aaff", bg = p.none, sp = "#00aaff", undercurl = true },
    SpellLocal = { fg = "#00ffff", bg = p.none, sp = "#00ffff", undercurl = true },
    SpellRare = { fg = "#ff00ff", bg = p.none, sp = "#ff00ff", undercurl = true },
    Statement = { fg = "#ffff60", bg = p.none, bold = true },
    StatusLine = { fg = p.white, bg = p.black, bold = true },
    StatusLineNC = { fg = p.black, bg = "gray70" },
    StatusLineTerm = { link = "StatusLine" },
    StatusLineTermNC = { link = "StatusLineNC" },
    StorageClass = { link = "Type" },
    String = { fg = "#ffafaf", bg = p.none },
    Structure = { link = "Type" },
    Substitute = { link = "Search" },
    TabLine = { fg = "#bcbcbc", bg = p.black, bold = true },
    TabLineFill = { fg = p.black, bg = p.black, bold = true },
    TabLineSel = { fg = p.white, bg = p.black, bold = true },
    TabNum = { fg = "orange", bg = p.black },
    Tag = { link = "Special" },
    Terminal = { link = "Normal" },
    Title = { fg = "#ff00ff", bg = p.none, bold = true },
    Todo = { fg = "#0000ff", bg = "#ffff00" },
    ToolbarButton = { fg = p.black, bg = "#e5e5e5", bold = true },
    ToolbarLine = { fg = p.none, bg = p.none },
    Type = { fg = "#5fff5f", bg = p.none, bold = true },
    Typedef = { link = "Type" },
    Underlined = { fg = "#add8e6", bg = p.none, bold = true, underline = true },
    VertSplit = { fg = p.white, bg = p.black },
    Visual = { fg = p.black, bg = "#bcbcbc" },
    VisualNOS = { fg = p.none, bg = p.black, bold = true, underline = true },
    WarningMsg = { fg = "#ff0000", bg = p.none },
    Whitespace = { fg = "#ff0000", bg = p.none },
    WildMenu = { fg = p.black, bg = "#ffff00" },
    lCursor = { link = "Cursor" },

    -- LSP
    -- LspReferenceRead = { bg = "#36383F" },
    -- LspReferenceText = { bg = "#36383F" },
    -- LspReferenceWrite = { bg = "#36383f" },
    -- DiagnosticError = { fg = palette.error },
    -- DiagnosticWarn = { fg = palette.warning },
    -- DiagnosticInfo = { fg = palette.info },
    -- DiagnosticHint = { fg = palette.hint },
    -- DiagnosticVirtualTextError = { fg = palette.error },
    -- DiagnosticVirtualTextWarn = { fg = palette.warning },
    -- DiagnosticVirtualTextInfo = { fg = palette.info },
    -- DiagnosticVirtualTextHint = { fg = palette.hint },
    -- DiagnosticUnderlineError = {},
    -- DiagnosticUnderlineWarn = {},
    -- DiagnosticUnderlineInfo = {},
    -- DiagnosticUnderlineHint = {},
    -- LspSignatureActiveParameter = { bg = palette.alt_bg, bold = true },
    -- LspCodeLens = { fg = palette.comment },

    -- nvim-treesitter: https://github.com/nvim-treesitter/nvim-treesitter
    -- ["@attribute"] = {},
    ["@boolean"] = { link = "Boolean" },
    ["@character"] = { link = "Character" },
    -- ["@character.special"] = {},
    ["@comment"] = { link = "Comment" },
    -- ["@comment.documentation"] = {},
    -- ["@comment.error"] = {},
    -- ["@comment.note"] = {},
    -- ["@comment.todo"] = {},
    -- ["@comment.warning"] = {},
    ["@conditional"] = { link = "Conditional" },
    -- ["@conditional.ternary"] = {},
    ["@constant"] = { link = "Constant" },
    ["@constant.builtin"] = { link = "Constant" },
    -- ["@constant.macro"] = {},
    ["@constructor"] = { link = "Function" },
    ["@constructor.call"] = { link = "Identifier" },
    ["@define"] = { link = "Define" },
    -- ["@diff.delta"] = {},
    -- ["@diff.minus"] = {},
    -- ["@diff.plus"] = {},
    ["@error"] = { link = "Error" },
    ["@exception"] = { link = "Exception" },
    -- ["@field"] = {},
    ["@function"] = { link = "Function" },
    ["@function.builtin"] = { link = "Identifier" },
    ["@function.call"] = { link = "Identifier" },
    ["@function.macro"] = { link = "PreProc" },
    ["@function.method"] = { link = "Function" },
    ["@include"] = { link = "Include" },
    ["@keyword"] = { link = "Keyword" },
    -- ["@keyword.conditional"] = {},
    -- ["@keyword.conditional.ternary"] = {},
    -- ["@keyword.coroutine"] = {},
    -- ["@keyword.debug"] = {},
    -- ["@keyword.directive"] = {},
    -- ["@keyword.directive.define"] = {},
    -- ["@keyword.exception"] = {},
    -- ["@keyword.function"] = {},
    -- ["@keyword.import"] = {},
    -- ["@keyword.operator"] = {},
    -- ["@keyword.repeat"] = {},
    -- ["@keyword.return"] = {},
    -- ["@keyword.storage"] = {},
    ["@label"] = { link = "Label" },
    -- ["@markup.environment"] = {},
    -- ["@markup.heading"] = {},
    -- ["@markup.italic"] = {},
    -- ["@markup.link"] = {},
    -- ["@markup.link.label"] = {},
    -- ["@markup.link.url"] = {},
    -- ["@markup.list"] = {},
    -- ["@markup.list.checked"] = {},
    -- ["@markup.list.unchecked"] = {},
    -- ["@markup.math"] = {},
    -- ["@markup.quote"] = {},
    -- ["@markup.raw"] = {},
    -- ["@markup.raw.block"] = {},
    -- ["@markup.strikethrough"] = {},
    -- ["@markup.strong"] = {},
    -- ["@markup.underline"] = {},
    ["@method"] = { link = "Function" },
    ["@method.call"] = { link = "Identifier" },
    -- ["@module"] = {},
    -- ["@module.builtin"] = {},
    -- ["@namespace"] = {},
    ["@number"] = { link = "Number" },
    -- ["@number.float"] = {},
    ["@operator"] = { link = "Operator" },
    ["@preproc"] = { link = "PreProc" },
    -- ["@property"] = {},
    ["@punctuation.bracket"] = { link = "Normal" },
    ["@punctuation.delimiter"] = { link = "Normal" },
    ["@punctuation.special"] = { link = "Special" },
    ["@repeat"] = { link = "Repeat" },
    ["@string"] = { link = "String" },
    -- ["@string.documentation"] = {},
    -- ["@string.escape"] = {},
    -- ["@string.regexp"] = {},
    ["@string.special"] = { link = "Special" },
    -- ["@string.special.path"] = {},
    -- ["@string.special.symbol"] = {},
    -- ["@string.special.url"] = {},
    -- ["@symbol"] = {},
    ["@tag"] = { link = "Tag" },
    -- ["@tag.attribute"] = {},
    -- ["@tag.delimiter"] = {},
    -- ["@text"] = {},
    -- ["@text.danger"] = {},
    ["@text.emphasis"] = { italic = true },
    -- ["@text.environment"] = {},
    -- ["@text.environment.name"] = {},
    ["@text.literal"] = { link = "String" },
    ["@text.literal.block"] = { link = "String" },
    -- ["@text.math"] = {},
    -- ["@text.note"] = {},
    -- ["@text.reference"] = {},
    ["@text.strike"] = { strikethrough = true },
    ["@text.strong"] = { bold = true },
    ["@text.title"] = { link = "Title"},
    -- ["@text.todo"] = {},
    -- ["@text.todo.checked"] = {},
    -- ["@text.todo.unchecked"] = {},
    ["@text.underline"] = { link = "Underline" },
    -- ["@text.uri"] = {},
    -- ["@text.warning"] = {},
    ["@type"] = { link = "Identifier" },
    ["@type.builtin"] = { link = "Type" },
    ["@type.definition"] = { link = "Type" },
    ["@type.qualifier"] = { link = "Type" },
    ["@variable"] = { fg = p.white },
    -- ["@variable.builtin"] = {},
    -- ["@variable.member"] = {},
    -- ["@variable.parameter"] = {},

    -- Language-specific highlights.
    --
    -- Bash
    ["@function.builtin.bash"] = { link = "Function" },
    ["@function.call.bash"] = { link = "Function" },
    ["@operator.bash"] = { link = "Statement" },
    ["@punctuation.bracket.bash"] = { link = "Special" },
    ["@punctuation.delimiter.bash"] = { link = "Statement" },
    ["@punctuation.special.bash"] = { link = "Special" },
    -- Git
    gitconfigVariable = { link = "Function" },
    -- Gitcommit (use similar colors to `git diff`)
    gitcommitDiff = { fg = "#b2b2b2", bg = p.none },
    diffAdded = { fg = "#18b218", bg = p.none },
    diffRemoved = { fg = "#b21818", bg = p.none },
    diffFile = { fg = p.white, bg = p.none, bold = true },
    diffLine = { fg = "#18b2b2", bg = p.none },
    diffIndexLine = { fg = p.white, bg = p.none, bold = true },
    diffSubName = { fg = "#b2b2b2", bg = p.none },
    ["@text.reference.gitcommit"] = { link = "Special" },
    ["@text.uri.gitcommit"] = { link = "String" },
    -- Haskell
    ["@constructor.haskell"] = { link = "Identifier" },
    ["@function.call.haskell"] = { link = "Function" },
    -- HTML
    htmlTag = { link = "Function" },
    htmlEndTag = { link = "Function" },
    -- INI
    dosiniHeader = { link = "Statement" },
    dosiniLabel = { link = "Function" },
    dosiniValue = { link = "Normal" },
    -- JSON
    ["@punctuation.bracket.json"] = { link = "Special" },
    -- Lua
    ["@constructor.lua"] = { link = "Identifier" },
    -- Makefile
    makeIdent = { link = "Function" },
    -- Markdown
    ["@label.markdown"] = { link = "Constant" },
    ["@punctuation.bracket.markdown_inline"] = { link = "Special" },
    ["@text.quote.markdown"] = { link = "Comment" },
    ["@text.reference.markdown_inline"] = { link = "Underlined" },
    ["@text.uri.markdown_inline"] = { link = "Constant" },
    -- PHP
    ["@operator.php"] = { link = "Statement" },
    ["@function.call.php"] = { link = "Function" },
    ["@punctuation.bracket.php"] = { link = "Special" },
    -- Python
    pythonBuiltin = { link = "Identifier" },
    pythonOperator = { link = "Statement" },
    -- SQL
    ["@attribute.sql"] = { link = "Statement" },
    -- Terraform
    ["@type.terraform"] = { link = "Type" },
    ["@punctuation.bracket.terraform"] = { link = "Special" },
    -- TOML
    tomlTable = { link = "Statement" },
    tomlTableArray = { link = "Function" },
    tomlKey = { link = "Function" },
    -- Vim
    ["@variable.builtin.vim"] = { link = "PreProc" },
    -- YAML
    ["@field.yaml"] = { link = "Function" },
    ["@string.yaml"] = { link = "Normal" },
    ["@punctuation.bracket.yaml"] = { link = "Special" },
    ["@punctuation.delimiter.yaml"] = { link = "Special" },
  }

  -- Set terminal colors.
  theme.terminal_colors = {
    terminal_color_0 = "#000000",
    terminal_color_1 = "#cd0000",
    terminal_color_2 = "#00cd00",
    terminal_color_3 = "#cdcd00",
    terminal_color_4 = "#0000ee",
    terminal_color_5 = "#cd00cd",
    terminal_color_6 = "#00cdcd",
    terminal_color_7 = "#e5e5e5",
    terminal_color_8 = "#7f7f7f",
    terminal_color_9 = "#ff0000",
    terminal_color_10 = "#00ff00",
    terminal_color_11 = "#ffff00",
    terminal_color_12 = "#5c5cff",
    terminal_color_13 = "#ff00ff",
    terminal_color_14 = "#00ffff",
    terminal_color_15 = "#ffffff",
  }
  for option, value in pairs(theme.terminal_colors) do
    vim.g[option] = value
  end

  -- Hide all semantic highlights.
  for _, group in ipairs(vim.fn.getcompletion("@lsp", "highlight")) do
    vim.api.nvim_set_hl(0, group, {})
  end

  -- Set the highlights.
  for group, colors in pairs(theme.highlights) do
    if colors.style then
      if type(colors.style) == "table" then
        colors = vim.tbl_extend("force", colors, colors.style)
      end
      colors.style = nil
    end
    vim.api.nvim_set_hl(0, group, colors)
  end
end

return theme
